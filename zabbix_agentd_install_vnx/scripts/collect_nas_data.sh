#/bin/sh
###################################################################
#
# script:  collect_nas_data
#
# author:  Brian LaRose (larose_brian@emc.com)
#
#   date:  Nov 18, 2009,  revised on Feb 23, 2011
#   date:  Aug 10, 2012,  revision: Dave Maytone - Changed ARRRAYNAME to add VNX Control Station
#   date:  Sept 23 2013,  revision: Dave Maytone - Added code in calcs to sum large File system values to avoid truncated
#			  RAWCAPACITY, FREECAPACITY, USEDCAPACITY and additional external script  (sumi.sh) to sum values
#     			  in routine
#
#                         This file and sumi.sh should be installed in /zabbix_operations directory where they are scheduled 
#                         to run from the root crontab
#
#  version: NOW SUPPORTS DART 6.0 and newer systems, nothing previous to 6.0
#           is any longer supported by this code revision.
#
#   file:  This script is designed to pull data from the celerra manager
#          at regular intervals and dump it into a file for pickup by 
#          interested parties.
#
#  design: This shell script works using functions (which are all listed
#          at the top).  Each function builds a particular variable which
#          in turn gets used at the end of the program in the logging
#          of output to the file.
#
#  changes:  As of 2011, this script no longer supports MORE than 1 backend
#            storage array. (previously supported 4)..
#
#
#
#  schema: The schema of the comma separated file is:
#   date   Dec  14 2013   revision: Jeffrey Fall - Added code to support zabbix data collection from /zabbix_operations/ and
#                                                  zabbix_operations/data
#                                                  This script is called by cron. 
#                                                  zabbix_agentd uses a config file in /usr/local/etc to pickup output
#                                                  from files generated by this script. See UserParameters in /etc/local/etc
#                                                  This file is installed by the zabbix installer written by 
#                                                  jeffrey_fall@nasscomm.com for supporting zabbix data collection from a vnx.
##########################
#
#  $ARRAYNAME,                 // Name of VNX 
#  $SERIALNO,                  // Serial Number of Frame
#  $NETWORK_NAME,               // Network Name
#  $SERIALNO2,                  // NOT USED OR SUPPORTED
#  $SERIALNO3,                  // NOT USED OR SUPPORTED
#  $SERIALNO4,                  // NOT USED OR SUPPORTED
#  $NUM_ARRAYS,                 // ALWAYS SET TO 1 FROM NOW ON
#  $APIVERSION,                  // API version 
#  $NUMDISKS,                  // number of disks
#  $NUMSTORAGEGROUPS,                  // number of storage groups
#  $MODEL_NUM,                  // Model Number 
#  $MICROCODELVL,                  // microcode level
#  $STORAGESERNO,                  // Storage Serial Number
#  $NUM_DATA_MOVERS,                  // Total Num Movers
#  $PHYSICALMEMORY,                  // Physical mem
#  $RAWCAPACITY,                  // Total Raw capacity of frame
#  $USEDCAPACITY,                  // Used Capacity 
#  $FREECAPACITY,                  // Free capacity
#  $TOT_NUM_FILESYSTEMS,            // Total Filesystems served
#  $NUM_IP_SERVED,                  // Number of IP addresses served
#  NUM_FAILED_MOVERS,                  // Number of Failed Movers
#  $LOCATION			// String from "/nas/bin/server_snmp -location"
#  $TIMESTAMP,                     // TimeStamp data was gathered
#  "https://"$CONTROL_STATION_IP"/Login" ,   // Control Station IP address
#  "http://powerlink.emc.com",    //  Link to EMC (for tickets in 1 click)
#  $STATUS                        // (either FAIL, INFO, WARN, PASS or OTHER)                

#
#
#
#
#
# outputs:  In addition to the neatly formatted CSV file that this program
#           puts out, we also put out a neatly formatted file describing 
#           the storage frame which is attached to the celerra.
#           The file /var/log/nas_storage_info.txt contains a DETAILED view
#           of the backend frame and it is suitable to be read into and
#           formatted as in XML very easily.  If this file exists, then
#           we just simply use the results therein.  if it does not exist
#           then we build it. (perhaps a nightly cron job removes the
#           file /var/log/nas_storage_info.txt to get a fresh one eash
#           morning when this is run.             
#           In addition to the /var/log/nas_storage file, we also, using the
#           same method as above, create a /var/log/nas_checkup.txt file
#           whenever it doesn't exist.  This is also used in the output of
#           this CSV.  It can be run by forcing checks with the force 
#           parameter to 
#           this script.
#
#          We also produce files: /var/log/nas_datamover_report.txt 
#          We also produce files: /var/log/nas_datamover_busy.txt 
#
#   todo:   1)  create a logit function that puts info of THIS process into a 
#               log in the standard place
#           2)  using the fs_dedupe -info -all command, share dedupe status
#                and the deplication ratio we are seeing.:q
#           3)  We ONLY report storage information on the FIRST frame in the
#               CELERRA.  If this is a gateway and there are numerous (up to 4
#               supported, then we will only report on the first one and 
#               generate the info files in /var/log/nas_storage_info2.txt, and
#               info3.txt and info4.txt..   
#
###################################################################
# Remove temp file from previous run
#rm /zabbix_operations/sums

#mv /zabbix_operations/tmp/sums /zabbix_operations/tmp/sums.old





#######################################################################
#
#  All Function calls are contained in this section, main at the bottom
#
#######################################################################
get_timestamp()
{
        TIMESTAMP=`date`;
}





#######################################################################
get_serialno()
{
# subtract the header and footer and get the number of arrays, then store
#  the values in SERIALNO .. SERIALNO4 (MAX 4).
#
        NUM_ARRAYS=1
        SERIALNO=`/nas/bin/nas_storage -list | tail -2 | awk ' { print $3 } ' `
        SERIALNO2='n/a';
        SERIALNO3='n/a';
        SERIALNO4='n/a';
}







#######################################################################
#
# This function uses the contents of the file /var/log/nas_storage_info.txt
# IF it already exists, but if it does not exist, then we recreate it.
#  Also note that if there are up to 4 ARRAYs attached to this storage, we
#  will run the job and put data in each of the /var/log/nas_storage_infoX.txt
# file depending on the number of arrays...
#
#######################################################################

get_nasstorageinfo()
{
#  if the array info hasn't been gathered, OR is being forced with force DO IT.
      if [ $parmeter = 'force' ]
      then
        touch /var/log/nas_storage_info.txt
        touch /var/log/nas_storage_info2.txt
        touch /var/log/nas_storage_info3.txt
        touch /var/log/nas_storage_info4.txt
        /nas/bin/nas_storage -info $SERIALNO  > /var/log/nas_storage_info.txt
        /nas/bin/nas_storage -info $SERIALNO2  > /var/log/nas_storage_info2.txt
        /nas/bin/nas_storage -info $SERIALNO3  > /var/log/nas_storage_info3.txt
        /nas/bin/nas_storage -info $SERIALNO4  > /var/log/nas_storage_info4.txt
      else
      echo "using existing nas_storage_info.txt "
      fi
# Jeffrey Fall 12.13.2013 Get the server version
/nas/bin/server_version ALL > /zabbix_operations/data/server.version
chown zabbix:zabbix /zabbix_operations/data/server.version


/nas/bin/nas_license -list > /zabbix_operations/data/license.list
chown zabbix:zabbix /zabbix_operations/data/license.list

# REMEMBER, WE ONLY use the first array for information.
#   This is a problem that will be fixed in future releases.
#
      ARRAYNAME=`grep arrayname /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      NETWORK_NAME=`grep network_name /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      APIVERSION=`grep API_version /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      NUMDISKS=`grep num_disks /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      NUMSTORAGEGROUPS=`grep num_storage_grps /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      MODEL_NUM=`grep model_num /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      FLARELEVEL=`grep FLARE-Operating-Environment /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      MICROCODELVL=`grep microcode_version /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      STORAGESERNO=`grep serial_num /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      PHYSICALMEMORY=`grep phys_memory /var/log/nas_storage_info.txt | tail -1| awk -F= ' { print $2 } ' `
      RAIDTYPE=`grep raid_type /var/log/nas_storage_info.txt  | tail -1| awk -F= ' { print $2 } ' `
}  
# end of functions





###################################################################
# Get the datamover status is failed or not?
###################################################################
check_failed_status()
{
NUM_FAILED_MOVERS=`/nas/bin/server_name ALL | grep -i "failed" | wc -l`

echo "$NUM_FAILED_MOVERS" > /zabbix_operations/data/array.vnx.movers.failed

}


###################################################################
# Get the CAPACITY report
###################################################################
get_capacity_report()
{
RAWCAPACITY=0;
USEDCAPACITY=0;
FREECAPACITY=0;
RAWDISKCAPACITYSUM=0;

# This method used to work with an older API, but we are using server_df for all
#      RAWCAPACITY=`/nas/bin/nas_disk -list | awk '{sum+=$3}END{print sum}' `
# This method worked on smaller file systems , but now calculates sums incorrectly
#
# D.Maytone   9/24/13
#RAWCAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$2}END{print sum}' `
#USEDCAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$3}END{print sum}' `
#FREECAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$4}END{print sum}' `
#


# Size
# Jeffrey Fall 12.9.2013 Changed $1 to $2 below to capture the raw capacity
size=`/nas/bin/server_df ALL | grep "%"| grep -v root | awk ' { print $2 }'`

if [ "$size" == "" ]
then
  echo "0" > /zabbix_operations/data/size 
else
  echo "$size" > /zabbix_operations/tmp/TEMPSUM
  /zabbix_operations/sumi.sh < /zabbix_operations/tmp/TEMPSUM > /zabbix_operations/tmp/sums
  #
  cp /zabbix_operations/tmp/sums /zabbix_operations/data/size
  rm /zabbix_operations/tmp/sums
  rm /zabbix_operations/tmp/TEMPSUM
fi


# Used
# Jeffrey Fall 12.9.2013 Changed $2 to $3 below to capture the used capacity
used=`/nas/bin/server_df ALL | grep "%"| grep -v root | awk ' { print $3 }'`

if [ "$used" == "" ]
then
  echo "0" > /zabbix_operations/data/used
else
  echo "$used" > /zabbix_operations/tmp/TEMPSUM
  /zabbix_operations/sumi.sh < /zabbix_operations/tmp/TEMPSUM > /zabbix_operations/tmp/sums
  #
  cp /zabbix_operations/tmp/sums /zabbix_operations/data/used
  rm /zabbix_operations/tmp/sums
  rm /zabbix_operations/tmp/TEMPSUM
fi


# Avail
# Jeffrey Fall 12.9.2013 Changed $3 to $4 below to capture the  avail capacity

avail=`/nas/bin/server_df ALL | grep "%"| grep -v root | awk ' { print $4 }'`

if [ "$avail" == "" ]; then
  echo "0" > /zabbix_operations/data/avail
else
  echo "$avail" > /zabbix_operations/tmp/TEMPSUM
  /zabbix_operations/sumi.sh < /zabbix_operations/tmp/TEMPSUM > /zabbix_operations/tmp/sums
  #
  cp /zabbix_operations/tmp/sums /zabbix_operations/data/avail
  rm /zabbix_operations/tmp/sums
  rm /zabbix_operations/tmp/TEMPSUM
fi


# percent Used 
# Jeffrey Fall 12.9.2013 Changed $3 to $4 below to capture the percentage used 
pused=`/nas/bin/server_df ALL | grep "%"| grep -v root | awk ' { print $4 }'`

if [ "$pused" == "" ]
then
  echo "0" > /zabbix_operations/data/avail
else
  echo "$pused" > /zabbix_operations/tmp/TEMPSUM
  /zabbix_operations/sumi.sh < /zabbix_operations/tmp/TEMPSUM > /zabbix_operations/tmp/sums
  #
  cp /zabbix_operations/tmp/sums /zabbix_operations/data/avail
  rm /zabbix_operations/tmp/sums
  rm /zabbix_operations/tmp/TEMPSUM
fi


# Jeffrey Fall 12.12.2013 added to get physical raw capacity of physical drives 

/nas/sbin/rootnas_disk -list |  grep -v root | grep -v sizeMB | awk ' { print $3 }'|  awk ' { print 1000 * $1 } ' > /zabbix_operations/tmp/TEMPSUM
/usr/bin/head -n -1 /zabbix_operations/tmp/TEMPSUM > /zabbix_operations/tmp/TEMPSUM_trimmed
/zabbix_operations/sumi.sh < /zabbix_operations/tmp/TEMPSUM_trimmed > /zabbix_operations/tmp/sums
#
RAWDISKCAPACITYSUM=`cat /zabbix_operations/tmp/sums`
cp /zabbix_operations/tmp/sums /zabbix_operations/data/rawdiskcapacitysum
rm /zabbix_operations/tmp/sums
rm /zabbix_operations/tmp/TEMPSUM
rm /zabbix_operations/tmp/TEMPSUM_trimmed
#




#RAWCAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$2}END{print sum}' `
#USEDCAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$3}END{print sum}' `
#FREECAPACITY=`/nas/bin/server_df ALL | grep "%"| awk '{sum+=$4}END{print sum}' `
# convert values to GBs
#
#RAWCAPACITY=`expr $RAWCAPACITY / 1024`
#USEDCAPACITY=`expr $USEDCAPACITY / 1024`
#FREECAPACITY=`expr $FREECAPACITY / 1024`


#echo "raw capacity ",$RAWCAPACITY;
#echo "used capacity ",$USEDCAPACITY;
#echo "free capacity ",$FREECAPACITY;
}





###################################################################
# Get the datamover IP addresses served 
###################################################################
get_ip_address_info()
{
NUM_IP_SERVED=`/nas/bin/server_ifconfig ALL -all | grep -v 127.0.0.1 | grep -i "inet=" | wc -l`

HOST=`hostname`;
CONTROL_STATION_IP=`grep $HOST /etc/hosts | awk ' { print $1; } ' ` ;
}



###################################################################
# Get the datamover information, total number
###################################################################
get_datamoverinfo()
{
NUM_DATA_MOVERS=`/nas/bin/server_sysconfig ALL -Platform | grep -i server_ | wc -l`

# now build the data mover report for pickup
/nas/bin/server_sysconfig ALL -platform > /var/log/nas_datamover_report.txt 


# Now, how busy are the data movers
/nas/bin/server_sysstat ALL  > /var/log/nas_datamover_busy.txt 

}




###################################################################
# Get the total num of filesystems.
###################################################################
get_filesysteminfo()
{
TOT_NUM_FILESYSTEMS=`/nas/bin/server_df ALL  | wc -l`

}



###################################################################
# Get the NAS status
###################################################################
get_status()
{
STATUS="";

# now just view the /var/log/nas_checkup_returncode.txt and process

ERR_RET_CODE=`cat /var/log/nas_checkup_returncode.txt`;
if [ "$ERR_RET_CODE" -eq "0" ]
then
    STATUS="PASS";
elif [ "$ERR_RET_CODE" -eq 1 ]
then
    STATUS="INFO";
elif [ "$ERR_RET_CODE" -eq 2 ]
then
    STATUS="WARN";
elif [ "$ERR_RET_CODE" -eq 3 ]
then
    STATUS="FAIL";
else
    STATUS="Other";
fi
}

###################################################################
# Get the NAS location
#  THIS IS CHANGED UNDER DART 6, the daemon is now called snmpd, this 
# uses whichever is available.
###################################################################
get_location()
{
if [ -x /nas/bin/server_snmpd ]; then
LOCATION=`/nas/bin/server_snmpd ALL -info | grep -i location | awk '{print $3}'`
else
LOCATION=`/nas/bin/server_snmp  ALL -location | awk '{print $3}'`
fi
}

###################################################################
# Get the CPU load of the datamover. This may need to be changed for
# gathering more than one datamover.
###################################################################
get_cpuload()
{
/nas/bin/server_sysstat ALL | grep cpu | awk ' { print $4 }' | awk ' { print 100 - $1 } ' > /zabbix_operations/data/array.vnx.cpu.load
}



###################################################################
###################################################################
#
#  MAIN LOOP LIVES HERE
#
#  This is the main section of the program, it calls each function
#  and builds up each of the variables, then logs them out to the 
#  file for future use by the reporting programs.
#
###################################################################


#  This program is typically called in cron jobs.  once a day we call it 
#  with the FORCE option to make it analyse the entire frame, then once 
#  an hour it is called with the incr option to see what has changed.
if [ $# -ne 1 ]
then
    echo "USAGE:  collect_nas_data.sh [ force | incr ] "
    echo " ERROR IN SYNTAX"
    echo "you must specify either the 'force' option which completes ALL analysis"
    echo "or the 'incr' which just does incremental analysis from last time"
    exit
fi


###################################################################
# 
#   Go ahead and setup some of the important variables that are 
#   required since this job will run out of the roon crontab
#    
###################################################################
NAS_DB=/nas;
export NAS_DB;

#######################################################################
#  keep only the last 1000 entries in the nas_report.csv file.
#######################################################################
touch /var/log/nas_report.csv 
touch /var/log/nas_checkup.txt
tail -1000 /var/log/nas_report.csv > /tmp/nas_keepers.csv
mv /tmp/nas_keepers.csv /var/log/nas_report.csv 


# pull off the parameters to see if healthcheck and info are being FORCED
# to run. (using the force option forces it)
parmeter=$1;

#  if the nas checkup has not been run, OR is being forced with forced DO IT.
      if [ $parmeter = 'force' ]
      then
         echo "Please note that this process could take longer than 15 minutes"
        /nas/bin/nas_checkup &> /var/log/nas_checkup.txt
        export ERRORCODE=$?;
        echo ${ERRORCODE} > /var/log/nas_checkup_returncode.txt
      elif  [ $parmeter = 'incr' ] 
      then
        echo "using existing nas_checkup.txt "
      else
         echo "Please note that this process could take longer than 15 minutes"
        /nas/bin/nas_checkup &> /var/log/nas_checkup.txt
        export ERRORCODE=$?;
        echo ${ERRORCODE} > /var/log/nas_checkup_returncode.txt
      fi

get_timestamp
#echo "TimeStamp = " $TIMESTAMP 

get_serialno
#echo "Serialno = " $SERIALNO 

# this next function does a huge amount of work for us using the output
# of the first call to get serial number
get_nasstorageinfo

get_datamoverinfo

get_filesysteminfo

get_ip_address_info

check_failed_status

get_capacity_report

get_status

get_location

get_cpuload



# write the CSV FILE
#  write_csv below...
echo $ARRAYNAME,$SERIALNO,$NETWORK_NAME,$SERIALNO2,$SERIALNO3,$SERIALNO4,\
     $NUM_ARRAYS,$APIVERSION,$NUMDISKS,$NUMSTORAGEGROUPS,$MODEL_NUM,\
     $MICROCODELVL,$STORAGESERNO,$NUM_DATA_MOVERS,\
     $PHYSICALMEMORY,$RAWCAPACITY,$USEDCAPACITY,\
     $FREECAPACITY,$TOT_NUM_FILESYSTEMS,$NUM_IP_SERVED,\
     $NUM_FAILED_MOVERS,$LOCATION,$TIMESTAMP,\
     "https://"$CONTROL_STATION_IP"/","http://powerlink.emc.com",\
     $STATUS >> /var/log/nas_report.csv


echo "FINISHED WITH SUCCESS"
